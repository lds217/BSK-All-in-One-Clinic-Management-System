package BsK.client.ui.component.InventoryPage;

import BsK.client.ui.component.common.RoundedPanel;
import BsK.client.ui.component.InventoryPage.common.InventoryButtonFactory;
import BsK.client.ui.component.InventoryPage.common.InventoryColorScheme;
import lombok.extern.slf4j.Slf4j;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

@Slf4j
public class GoodsReceiptPanel extends JPanel {
    private InventoryPage parentPage;
    
    // Header information
    private JComboBox<String> supplierCombo;
    private JTextField invoiceNumberField;
    private JTextField receiptDateField;
    
    // Medicine search and add
    private JTextField medicineSearchField;
    private JButton addMedicineButton;
    
    // Receipt items table
    private JTable receiptTable;
    private DefaultTableModel receiptTableModel;
    
    // Total and actions
    private JLabel totalAmountLabel;
    private JButton saveReceiptButton;
    private JButton cancelButton;
    private JButton printButton;
    
    // Formatters
    private SimpleDateFormat dateFormatter;
    private NumberFormat currencyFormatter;
    
    // Current receipt data
    private double totalAmount = 0.0;

    public GoodsReceiptPanel(InventoryPage parentPage) {
        this.parentPage = parentPage;
        this.dateFormatter = new SimpleDateFormat("dd/MM/yyyy");
        this.currencyFormatter = NumberFormat.getNumberInstance(new Locale("vi", "VN"));
        
        setLayout(new BorderLayout());
        setBackground(new Color(245, 245, 245));
        
        initializeComponents();
        layoutComponents();
        setupEventListeners();
    }

    private void initializeComponents() {
        // Supplier combo
        supplierCombo = new JComboBox<>(new String[]{
            "Ch·ªçn nh√† cung c·∫•p...",
            "C√¥ng ty TNHH D∆∞·ª£c ph·∫©m ABC",
            "C√¥ng ty C·ªï ph·∫ßn D∆∞·ª£c H·∫≠u Giang",
            "C√¥ng ty TNHH D∆∞·ª£c ph·∫©m Traphaco",
            "C√¥ng ty C·ªï ph·∫ßn D∆∞·ª£c ph·∫©m OPC",
            "C√¥ng ty TNHH D∆∞·ª£c ph·∫©m Imexpharm"
        });
        supplierCombo.setFont(new Font("Arial", Font.PLAIN, 14));
        supplierCombo.setPreferredSize(new Dimension(300, 35));
        
        // Invoice number field
        invoiceNumberField = new JTextField();
        invoiceNumberField.setFont(new Font("Arial", Font.PLAIN, 14));
        invoiceNumberField.setPreferredSize(new Dimension(200, 35));
        invoiceNumberField.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(200, 200, 200)),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        
        // Receipt date field (auto-filled with today)
        receiptDateField = new JTextField(dateFormatter.format(new Date()));
        receiptDateField.setFont(new Font("Arial", Font.PLAIN, 14));
        receiptDateField.setPreferredSize(new Dimension(150, 35));
        receiptDateField.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(200, 200, 200)),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        
        // Medicine search field with placeholder
        medicineSearchField = new JTextField("T√¨m thu·ªëc theo t√™n ho·∫∑c qu√©t m√£ v·∫°ch...");
        medicineSearchField.setFont(new Font("Arial", Font.ITALIC, 14));
        medicineSearchField.setForeground(InventoryColorScheme.TEXT_DISABLED);
        medicineSearchField.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(InventoryColorScheme.BORDER_LIGHT, 2),
            BorderFactory.createEmptyBorder(12, 15, 12, 15)
        ));
        
        // Add focus listener for placeholder behavior
        medicineSearchField.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent e) {
                if (medicineSearchField.getText().equals("T√¨m thu·ªëc theo t√™n ho·∫∑c qu√©t m√£ v·∫°ch...")) {
                    medicineSearchField.setText("");
                    medicineSearchField.setFont(new Font("Arial", Font.PLAIN, 14));
                    medicineSearchField.setForeground(InventoryColorScheme.TEXT_PRIMARY);
                    medicineSearchField.setBorder(BorderFactory.createCompoundBorder(
                        BorderFactory.createLineBorder(InventoryColorScheme.PRIMARY_BLUE, 2),
                        BorderFactory.createEmptyBorder(12, 15, 12, 15)
                    ));
                }
            }
            
            @Override
            public void focusLost(java.awt.event.FocusEvent e) {
                if (medicineSearchField.getText().trim().isEmpty()) {
                    medicineSearchField.setText("T√¨m thu·ªëc theo t√™n ho·∫∑c qu√©t m√£ v·∫°ch...");
                    medicineSearchField.setFont(new Font("Arial", Font.ITALIC, 14));
                    medicineSearchField.setForeground(InventoryColorScheme.TEXT_DISABLED);
                    medicineSearchField.setBorder(BorderFactory.createCompoundBorder(
                        BorderFactory.createLineBorder(InventoryColorScheme.BORDER_LIGHT, 2),
                        BorderFactory.createEmptyBorder(12, 15, 12, 15)
                    ));
                }
            }
        });
        
        // Receipt table
        String[] columns = {"T√™n Thu·ªëc", "L√¥", "H·∫°n S·ª≠ D·ª•ng", "S·ªë L∆∞·ª£ng", "ƒê∆°n Gi√° Nh·∫≠p", "Th√†nh Ti·ªÅn", "X√≥a"};
        receiptTableModel = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 6; // Only delete column is editable
            }
        };
        receiptTable = new JTable(receiptTableModel);
        setupReceiptTable();
        
        // Total amount label
        totalAmountLabel = new JLabel("0 VNƒê");
        totalAmountLabel.setFont(new Font("Arial", Font.BOLD, 24));
        totalAmountLabel.setForeground(new Color(76, 175, 80));
        totalAmountLabel.setHorizontalAlignment(SwingConstants.RIGHT);
        
        // Action buttons using standardized factory
        saveReceiptButton = InventoryButtonFactory.createPrimaryButton("üíæ L∆∞u Phi·∫øu Nh·∫≠p", InventoryButtonFactory.LARGE_BUTTON_SIZE);
        cancelButton = InventoryButtonFactory.createSecondaryButton("‚ùå H·ªßy B·ªè", InventoryButtonFactory.LARGE_BUTTON_SIZE);
        printButton = InventoryButtonFactory.createSpecialButton("üñ®Ô∏è In Phi·∫øu", InventoryButtonFactory.LARGE_BUTTON_SIZE);
        printButton.setEnabled(false);
    }

    private void setupReceiptTable() {
        receiptTable.setFont(new Font("Arial", Font.PLAIN, 14));
        receiptTable.setRowHeight(40);
        receiptTable.setBackground(Color.WHITE);
        receiptTable.setGridColor(new Color(230, 230, 230));
        receiptTable.setShowVerticalLines(true);
        receiptTable.setShowHorizontalLines(true);
        receiptTable.getTableHeader().setFont(new Font("Arial", Font.BOLD, 14));
        receiptTable.getTableHeader().setBackground(InventoryColorScheme.TABLE_HEADER_BG);
        receiptTable.getTableHeader().setForeground(InventoryColorScheme.TABLE_HEADER_TEXT);
        receiptTable.getTableHeader().setReorderingAllowed(false);
        
        // Set column widths
        TableColumn col0 = receiptTable.getColumnModel().getColumn(0); // T√™n Thu·ªëc
        col0.setPreferredWidth(200);
        TableColumn col1 = receiptTable.getColumnModel().getColumn(1); // L√¥
        col1.setPreferredWidth(100);
        TableColumn col2 = receiptTable.getColumnModel().getColumn(2); // HSD
        col2.setPreferredWidth(100);
        TableColumn col3 = receiptTable.getColumnModel().getColumn(3); // S·ªë L∆∞·ª£ng
        col3.setPreferredWidth(100);
        TableColumn col4 = receiptTable.getColumnModel().getColumn(4); // ƒê∆°n gi√°
        col4.setPreferredWidth(120);
        TableColumn col5 = receiptTable.getColumnModel().getColumn(5); // Th√†nh ti·ªÅn
        col5.setPreferredWidth(140);
        TableColumn col6 = receiptTable.getColumnModel().getColumn(6); // X√≥a
        col6.setPreferredWidth(80);
        
        // Center align specific columns
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        receiptTable.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        receiptTable.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        receiptTable.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        
        // Right align money columns
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
        receiptTable.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);
        receiptTable.getColumnModel().getColumn(5).setCellRenderer(rightRenderer);
        
        // Delete button column
        receiptTable.getColumnModel().getColumn(6).setCellRenderer(new DeleteButtonRenderer());
        receiptTable.getColumnModel().getColumn(6).setCellEditor(new DeleteButtonEditor());
    }

    private void layoutComponents() {
        JPanel mainPanel = new JPanel(new BorderLayout(0, 20));
        mainPanel.setBorder(BorderFactory.createEmptyBorder(25, 25, 25, 25));
        mainPanel.setOpaque(false);

        // Title
        JLabel titleLabel = new JLabel("PHI·∫æU NH·∫¨P KHO", SwingConstants.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 28));
        titleLabel.setForeground(new Color(37, 47, 63));
        titleLabel.setBorder(BorderFactory.createEmptyBorder(0, 0, 20, 0));
        mainPanel.add(titleLabel, BorderLayout.NORTH);

        // Content area
        JPanel contentPanel = new JPanel(new BorderLayout(0, 20));
        contentPanel.setOpaque(false);

        // Header info panel
        RoundedPanel headerPanel = createHeaderPanel();
        contentPanel.add(headerPanel, BorderLayout.NORTH);

        // Medicine items panel
        RoundedPanel itemsPanel = createItemsPanel();
        contentPanel.add(itemsPanel, BorderLayout.CENTER);

        // Footer with total and actions
        RoundedPanel footerPanel = createFooterPanel();
        contentPanel.add(footerPanel, BorderLayout.SOUTH);

        mainPanel.add(contentPanel, BorderLayout.CENTER);
        add(mainPanel, BorderLayout.CENTER);
    }

    private RoundedPanel createHeaderPanel() {
        RoundedPanel panel = new RoundedPanel(10, Color.WHITE, true);
        panel.setLayout(new GridBagLayout());
        panel.setBorder(BorderFactory.createEmptyBorder(25, 25, 25, 25));
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 15);
        gbc.anchor = GridBagConstraints.WEST;
        
        // Row 1: Supplier
        gbc.gridx = 0; gbc.gridy = 0;
        panel.add(new JLabel("Nh√† cung c·∫•p:"), gbc);
        gbc.gridx = 1; gbc.gridwidth = 2;
        panel.add(supplierCombo, gbc);
        
        // Row 2: Invoice number and date
        gbc.gridx = 0; gbc.gridy = 1; gbc.gridwidth = 1;
        panel.add(new JLabel("S·ªë H√≥a ƒê∆°n:"), gbc);
        gbc.gridx = 1;
        panel.add(invoiceNumberField, gbc);
        
        gbc.gridx = 2;
        panel.add(new JLabel("Ng√†y nh·∫≠p:"), gbc);
        gbc.gridx = 3;
        panel.add(receiptDateField, gbc);
        
        return panel;
    }

    private RoundedPanel createItemsPanel() {
        RoundedPanel panel = new RoundedPanel(10, Color.WHITE, true);
        panel.setLayout(new BorderLayout(0, 15));
        panel.setBorder(BorderFactory.createEmptyBorder(25, 25, 25, 25));
        
        // Simplified medicine search section
        JPanel searchPanel = new JPanel(new BorderLayout(10, 0));
        searchPanel.setOpaque(false);
        searchPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 15, 0));
        
        JLabel searchIcon = new JLabel("üîç");
        searchIcon.setFont(new Font("Arial", Font.PLAIN, 16));
        searchPanel.add(searchIcon, BorderLayout.WEST);
        
        medicineSearchField.setPreferredSize(new Dimension(0, 45));
        searchPanel.add(medicineSearchField, BorderLayout.CENTER);
        
        panel.add(searchPanel, BorderLayout.NORTH);
        
        // Items table
        JScrollPane scrollPane = new JScrollPane(receiptTable);
        scrollPane.setBorder(BorderFactory.createTitledBorder(
            BorderFactory.createLineBorder(new Color(200, 200, 200)),
            " Danh s√°ch thu·ªëc nh·∫≠p kho ",
            0, 0, new Font("Arial", Font.BOLD, 14), new Color(37, 47, 63)
        ));
        scrollPane.getViewport().setBackground(Color.WHITE);
        scrollPane.setPreferredSize(new Dimension(0, 300));
        
        panel.add(scrollPane, BorderLayout.CENTER);
        
        return panel;
    }

    private RoundedPanel createFooterPanel() {
        RoundedPanel panel = new RoundedPanel(10, Color.WHITE, true);
        panel.setLayout(new BorderLayout(20, 0));
        panel.setBorder(BorderFactory.createEmptyBorder(25, 25, 25, 25));
        
        // Total section
        JPanel totalPanel = new JPanel(new BorderLayout());
        totalPanel.setOpaque(false);
        
        JLabel totalLabel = new JLabel("T·ªîNG TI·ªÄN NH·∫¨P KHO:");
        totalLabel.setFont(new Font("Arial", Font.BOLD, 18));
        totalLabel.setForeground(new Color(37, 47, 63));
        totalPanel.add(totalLabel, BorderLayout.WEST);
        totalPanel.add(totalAmountLabel, BorderLayout.EAST);
        
        // Actions panel with split layout (Cancel left, Print/Save right)
        JButton[] leftButtons = {cancelButton};
        JButton[] rightButtons = {printButton, saveReceiptButton};
        JPanel actionsPanel = InventoryButtonFactory.createSplitButtonGroup(leftButtons, rightButtons);
        
        panel.add(totalPanel, BorderLayout.WEST);
        panel.add(actionsPanel, BorderLayout.EAST);
        
        return panel;
    }

    private void setupEventListeners() {
        // Medicine search field - Enter key adds medicine
        medicineSearchField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    addMedicineToReceipt();
                }
            }
        });
        

        
        // Action buttons
        saveReceiptButton.addActionListener(e -> saveReceipt());
        cancelButton.addActionListener(e -> cancelReceipt());
        printButton.addActionListener(e -> printReceipt());
    }

    private void addMedicineToReceipt() {
        String searchText = medicineSearchField.getText().trim();
        if (searchText.isEmpty() || searchText.equals("T√¨m thu·ªëc theo t√™n ho·∫∑c qu√©t m√£ v·∫°ch...")) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng nh·∫≠p t√™n thu·ªëc ho·∫∑c qu√©t m√£ v·∫°ch!", 
                "Th√¥ng b√°o", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // TODO: Search medicine in database and show selection dialog
        showAddMedicineDialog(searchText);
    }

    private void showAddMedicineDialog(String searchText) {
        // Mock implementation - show a simple dialog for adding medicine details
        JDialog dialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(this), "Th√™m Thu·ªëc V√†o Phi·∫øu Nh·∫≠p", true);
        dialog.setLayout(new BorderLayout());
        dialog.setSize(500, 400);
        dialog.setLocationRelativeTo(this);
        
        JPanel formPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.anchor = GridBagConstraints.WEST;
        
        // Medicine name (read-only, from search)
        gbc.gridx = 0; gbc.gridy = 0;
        formPanel.add(new JLabel("T√™n thu·ªëc:"), gbc);
        gbc.gridx = 1;
        JTextField nameField = new JTextField(searchText, 20);
        nameField.setEditable(false);
        formPanel.add(nameField, gbc);
        
        // Batch number
        gbc.gridx = 0; gbc.gridy = 1;
        formPanel.add(new JLabel("S·ªë l√¥:"), gbc);
        gbc.gridx = 1;
        JTextField batchField = new JTextField(20);
        formPanel.add(batchField, gbc);
        
        // Expiry date
        gbc.gridx = 0; gbc.gridy = 2;
        formPanel.add(new JLabel("H·∫°n s·ª≠ d·ª•ng:"), gbc);
        gbc.gridx = 1;
        JTextField expiryField = new JTextField("dd/MM/yyyy", 20);
        formPanel.add(expiryField, gbc);
        
        // Quantity
        gbc.gridx = 0; gbc.gridy = 3;
        formPanel.add(new JLabel("S·ªë l∆∞·ª£ng:"), gbc);
        gbc.gridx = 1;
        JSpinner quantitySpinner = new JSpinner(new SpinnerNumberModel(1, 1, 9999, 1));
        formPanel.add(quantitySpinner, gbc);
        
        // Unit price
        gbc.gridx = 0; gbc.gridy = 4;
        formPanel.add(new JLabel("ƒê∆°n gi√° nh·∫≠p:"), gbc);
        gbc.gridx = 1;
        JTextField priceField = new JTextField("0", 20);
        formPanel.add(priceField, gbc);
        
        // Buttons
        JPanel buttonPanel = new JPanel(new FlowLayout());
        JButton addBtn = new JButton("Th√™m");
        JButton cancelBtn = new JButton("H·ªßy");
        
        addBtn.addActionListener(e -> {
            try {
                String medicineName = nameField.getText();
                String batch = batchField.getText();
                String expiry = expiryField.getText();
                int quantity = (Integer) quantitySpinner.getValue();
                double price = Double.parseDouble(priceField.getText().replace(",", ""));
                double lineTotal = quantity * price;
                
                // Add to table
                receiptTableModel.addRow(new Object[]{
                    medicineName,
                    batch,
                    expiry,
                    quantity,
                    currencyFormatter.format(price),
                    currencyFormatter.format(lineTotal),
                    "üóëÔ∏è"
                });
                
                updateTotalAmount();
                medicineSearchField.setText("");
                dialog.dispose();
                
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(dialog, "Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng s·ªë!", 
                    "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        });
        
        cancelBtn.addActionListener(e -> dialog.dispose());
        
        buttonPanel.add(addBtn);
        buttonPanel.add(cancelBtn);
        
        dialog.add(formPanel, BorderLayout.CENTER);
        dialog.add(buttonPanel, BorderLayout.SOUTH);
        dialog.setVisible(true);
    }

    private void updateTotalAmount() {
        totalAmount = 0.0;
        for (int i = 0; i < receiptTableModel.getRowCount(); i++) {
            String lineTotalStr = (String) receiptTableModel.getValueAt(i, 5);
            try {
                double lineTotal = Double.parseDouble(lineTotalStr.replace(",", ""));
                totalAmount += lineTotal;
            } catch (NumberFormatException e) {
                log.warn("Could not parse line total: " + lineTotalStr);
            }
        }
        totalAmountLabel.setText(currencyFormatter.format(totalAmount) + " VNƒê");
    }

    private void saveReceipt() {
        if (receiptTableModel.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt lo·∫°i thu·ªëc!", 
                "Th√¥ng b√°o", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (supplierCombo.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn nh√† cung c·∫•p!", 
                "Th√¥ng b√°o", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // TODO: Save receipt to database
        JOptionPane.showMessageDialog(this, "L∆∞u phi·∫øu nh·∫≠p kho th√†nh c√¥ng!\nT·ªïng ti·ªÅn: " + totalAmountLabel.getText(), 
            "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
        
        printButton.setEnabled(true);
        clearForm();
    }

    private void cancelReceipt() {
        int confirm = JOptionPane.showConfirmDialog(this, 
            "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy phi·∫øu nh·∫≠p n√†y?", 
            "X√°c nh·∫≠n", JOptionPane.YES_NO_OPTION);
        
        if (confirm == JOptionPane.YES_OPTION) {
            clearForm();
        }
    }

    private void printReceipt() {
        // TODO: Implement print functionality
        JOptionPane.showMessageDialog(this, "Ch·ª©c nƒÉng in phi·∫øu nh·∫≠p kho ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn!", 
            "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
    }

    private void clearForm() {
        supplierCombo.setSelectedIndex(0);
        invoiceNumberField.setText("");
        receiptDateField.setText(dateFormatter.format(new Date()));
        
        // Reset search field to placeholder
        medicineSearchField.setText("T√¨m thu·ªëc theo t√™n ho·∫∑c qu√©t m√£ v·∫°ch...");
        medicineSearchField.setFont(new Font("Arial", Font.ITALIC, 14));
        medicineSearchField.setForeground(InventoryColorScheme.TEXT_DISABLED);
        medicineSearchField.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(InventoryColorScheme.BORDER_LIGHT, 2),
            BorderFactory.createEmptyBorder(12, 15, 12, 15)
        ));
        
        receiptTableModel.setRowCount(0);
        totalAmount = 0.0;
        totalAmountLabel.setText("0 VNƒê");
        printButton.setEnabled(false);
    }

    public void refreshData() {
        // TODO: Refresh supplier list and other master data
        log.info("Goods receipt panel data refreshed");
    }

    // Custom cell renderer for delete button
    private class DeleteButtonRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {
            return InventoryButtonFactory.createIconButton(
                InventoryButtonFactory.ICON_DELETE, 
                InventoryColorScheme.DANGER_RED, 
                InventoryColorScheme.darken(InventoryColorScheme.DANGER_RED, 0.2f),
                "X√≥a d√≤ng n√†y"
            );
        }
    }

    // Custom cell editor for delete button
    private class DeleteButtonEditor extends DefaultCellEditor {
        private JButton button;
        private int currentRow;

        public DeleteButtonEditor() {
            super(new JCheckBox());
            button = InventoryButtonFactory.createIconButton(
                InventoryButtonFactory.ICON_DELETE, 
                InventoryColorScheme.DANGER_RED, 
                InventoryColorScheme.darken(InventoryColorScheme.DANGER_RED, 0.2f),
                "X√≥a d√≤ng n√†y"
            );
            button.addActionListener(e -> {
                receiptTableModel.removeRow(currentRow);
                updateTotalAmount();
                fireEditingStopped();
            });
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            currentRow = row;
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            return "üóëÔ∏è";
        }
    }
} 